apply plugin: "com.android.application"
apply plugin: "kotlin-android"
apply plugin: "kotlin-android-extensions"
apply plugin: "kotlinx-serialization"
apply plugin: "kotlin-kapt"

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"

    defaultConfig {
        applicationId "com.olderwold.profile"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"
        }
    }

    sourceSets {
        getByName("main").java.srcDirs("src/main/kotlin", "src/main/kotlinX")
        getByName("test").java.srcDirs("src/test/kotlin", "src/test/kotlinX")
    }

    packagingOptions {
        exclude("META-INF/*.kotlin_module")
    }
}

dependencies {
    // Align project versions
    implementation(platform(project(':platform')))
    // Align versions of all Kotlin components
    implementation(platform("org.jetbrains.kotlin:kotlin-bom"))
    // Use the Kotlin JDK 8 standard library.
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
    // Used by Ktor + KotlinX serialization
    implementation("org.jetbrains.kotlin:kotlin-reflect")

    implementation("androidx.navigation:navigation-fragment-ktx")
    implementation("androidx.navigation:navigation-ui-ktx")
    implementation("com.google.android.material:material")

    implementation("androidx.lifecycle:lifecycle-viewmodel-ktx")

    implementation("androidx.constraintlayout:constraintlayout")

    // Network layer Ktor + Kotlin Serialization
    implementation("com.squareup.okhttp3:okhttp")
    implementation("com.squareup.okhttp3:logging-interceptor")

    implementation("io.ktor:ktor-client-core-jvm")
    implementation("io.ktor:ktor-client-serialization-jvm")
    implementation("io.ktor:ktor-client-okhttp")

    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core")

    // Java 8 Time API Backport
    implementation("com.jakewharton.threetenabp:threetenabp")

    implementation("com.airbnb.android:lottie")

    implementation("com.github.bumptech.glide:glide")
    kapt("com.github.bumptech.glide:compiler:4.11.0")

    // Use the Kotlin test library.
    testImplementation("org.jetbrains.kotlin:kotlin-test")
    // Use the Kotlin JUnit integration.
    testImplementation("org.jetbrains.kotlin:kotlin-test-junit")
    // Allows to Mock away network calls to expected responses
    testImplementation("io.ktor:ktor-client-mock-jvm")
    // Mockk is much more friendly to Kotlin
    testImplementation("io.mockk:mockk")
    testImplementation("io.mockk:mockk-dsl")
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
        // Kotlin compiler treats warnings as errors
        allWarningsAsErrors = true
    }
}
